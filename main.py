#page( main )    Version 1.10    10-3-21
from collections import OrderedDict
import world, re
from init import Player
from text_display import IntroScreen

def save_( ):
    print( "saving..." )
    input( 'press return to cont...' )
    with open( "vars.txt", "w" ) as file:
        file.write( str( player.x ) + "\n" )
        file.write( str( player.y ) + "\n" )
        file.write( str( player.hp ) + "\n" )
        file.write( str( player.level ) + "\n" )
        file.write( str( player.experience )+ "\n" )
        file.write( str( player.gold ) + "\n" )
        for items in player.inventory:
            file.write( str( items ) )
        file.write( str( player.pclass ) )
    file.close()
def load_():
    print( "Loading..." )
    input( "Press return to cont..." )
    with open( "vars.txt", "r" ) as file:
        player.x = int( file.readline() )
        player.y = int( file.readline() )
        player.hp = int( file.readline() )
        player.level = int( file.readline() ) 
        player.experience = int( file.readline() )
        player.gold = int( file.readline() )
        player.inventory = re.findall( '[A-Z][^A-Z]*', file.readline() )
        player.pclass = str( file.readline() )
    file.close()
#create dict of available user actions as key:value pairs i.e., n : move_north()
def action_adder(action_dict, hotkey, action, name_):
    action_dict[hotkey.lower()] = action
    action_dict[hotkey.upper()] = action
    print("{}: {}".format(hotkey, name_)) 
def get_available_actions(room_, player_):
    actions = OrderedDict()
    print("Choose an action:\n ")
    action_adder( actions, 'sv', save_, 'save' )
    action_adder( actions, 'ld', load_, 'load' )
    if player_.inventory:
        action_adder(actions, 'i', player.print_inventory, "Print inventory")
    #main: room_ = world.tile_at(player.x, player.y), is room_ of type Start
    if isinstance( room_, world.Start ):pass
    if isinstance( room_, world.EnemyTile ) and room.enemy.is_alive() :
        action_adder( actions, 'a', player.attack, "Attack" )
    if isinstance( room_, world.TraderTile ) and player.trade():
        action_adder( actions, 't', player.trade, "Trade" )
    else:
        if world.tile_at(room_.x, room_.y - 1): 
            action_adder(actions, 'n', player.move_north, "Go north")
        if world.tile_at(room_.x, room_.y + 1):
            action_adder(actions, 's', player.move_south, "Go south")
        if world.tile_at(room_.x + 1, room_.y):
            action_adder(actions, 'e', player.move_east, "Go east")
        if world.tile_at(room_.x - 1, room_.y):
            action_adder(actions, 'w', player.move_west, "Go west")
    return actions
#Gets users available actions list for each room
#populates/prints dict data, generated by action_adder()
def choose_action( _room, player_ ):
    action = None
    while not action:
        available_actions = get_available_actions( _room, player_ )
        action_input = input("\nAction: ")
        action = available_actions.get(action_input)
        if action: IntroScreen.clear(); action()
        else: print("Invalid action!")

IntroScreen.intro_text()
world.parse_world_dsl() 
player = Player()

#game loop
while player.is_alive():
    room = world.tile_at( player.x, player.y )
    IntroScreen.clear()
    IntroScreen.title_text()
    player.hud()
    print(room.intro_text())
    room.modify_player( player )    
    if player.is_alive():
        choose_action( room, player )
    elif not player.is_alive():
        print("Your journey has come to an early end!") 
